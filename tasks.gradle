import groovy.json.JsonSlurper

/*
task releaseTrain {
    doLast {
        def versions = new JsonSlurper().parseText(new File("release-train.json").text)
        def currentBranch = ciBuildRefName

        if (currentBranch in versions) {
            def nextBranch = versions.getAt(versions.indexOf(currentBranch) + 1)

            ["git", "checkout", currentBranch].execute().text
            ["git", "checkout", nextBranch].execute().text

            String mergeAttempt = ["git", "merge", currentBranch].execute().text

            if (mergeAttempt.contains("merge failed")) {
                throw new Error("Merge conflict")
            }

            ["git", "push", "http://${ciCredentials}@${ciProjectPath}", "HEAD:" + nextBranch].execute().text
        }
    }
}

task releaseDocker(dependsOn: build) {
    doLast {
        def registryUrl = 'docker-registry.cardpay-test.com'
        def imageName = 'log-service-local'

        copy {
            from 'src/main/resources/docker/Dockerfile'
            from 'build/libs/log-service.war'
            into 'build/docker'
        }
        exec {
            workingDir 'build/docker'
            commandLine 'docker', 'build', '-t', "${registryUrl}/cardpay/${imageName}:${getMajorVersion()}", '.'
        }
        exec { commandLine 'docker', 'login', registryUrl, "-u=${dockerUsername}", "-p=${dockerPassword}" }
        exec { commandLine 'docker', 'push', "${registryUrl}/cardpay/${imageName}:${getMajorVersion()}" }
        exec { commandLine 'docker', 'rmi', "${registryUrl}/cardpay/${imageName}:${getMajorVersion()}" }
    }
}

def getMajorVersion() {
    (projectVersion =~ /^.{3}/)[0]
}
*/
